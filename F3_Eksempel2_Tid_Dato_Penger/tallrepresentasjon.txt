Om tall i datamaskiner:

- Dere har nok ikke lært om flyttallsrepresentasjon (binary64) i DAT100/MAT101 ?! 
- Dere har nok heller ikke lært om char-/tegn-representasjon, tegnsett, etc.   ?!

[Note to self: Burde vi gjort noe med dette i 1. semester? JA]

Problemstillingen:
Datatypene float og double kan ikke representere desimaltall nøyaktig!
Det er ikke flyttall vs. fixed som er problemet. 
Problemet er skaleringsbasen, om det er 2-talls eller 10-talls.


Noen eksempler (ikke helt korrekte, men illustrerer poenget):

5.125:
------
double:     <binære sifre> *  2^eksp 	5.125 = (0000000101001)   41 * 2^-3 =   41 /   8 = 5.125
	evt.    <binære sifre> *  2^eksp 	5.125 = (1010010000000) 2624 * 2^-9 = 2624 / 512 = 5.125
	evt. alle muligheter imellom.
	
BigDecimal: <binære sifre> * 10^eksp  5.125 = (1010000000101) 5125 * 10^-3 = 5125 / 1000 = 5.125

0.1:
----
0.1 binært 	= 0.0 0011 0011 0011 0011 0011 0011 osv ...

La oss si vi har 8 bits i mantisse
	0.1 binært:				= 		(00011001)  25 * 2^ -8 =  25 /  256 = 0,09765625
	Normalisert:			= 		(11001100) 204 * 2^-11 = 204 / 2048 = 0,099609375
	Enda mer normalisert:	= 2^8 + (10011001) 409 * 2^-12 = 409 / 4096 = 0,099853515625

BigDecimal: 1 * 10^-1 = 0.1

Java (følger IEEE-754 standard)
----
float  har 23 bits (~ 7 desimale siffer) i mantisse + 8 bits for eksponent + 1 for fortegn = 32 bits totalt
	0.1 normalisert = 2^23 + (10011001100110011001101) * 2^-27 
		(8388608 + 5033165) * 2^-27 = 13421773 / 134217728 = 0,10000000149011612

double har 52 bits (~16 desimale siffer) i mantisse + 11 + 1 = 64 bits totalt
	0.1 ...
	
BigDecimal har fleksibel heltallsdel (sifre) og 32 bits skaleringsdel (hvor komma skal plasseres)

